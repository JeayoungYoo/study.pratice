[20170622 복습 실행클래스의 구조]

c.f)파일import
import>general>existing progexts into workspace (폴더/압축파일로 받을수있음)
-옵션 copy project into workspace :외부(usb)에있는파일 복사해서가져와 쓸수있음


*메소드: 파일 클래스내에 속한 멤버 함수(단위),공유가능 
실행클레스에 main메소드구성
ex>publuic static void main(String[] arge){}
- publuic :왜 실행클래스에 publuic이 붙어있나 어디서든 밖에서 실행시킬려고
- static  :RAM메모리의 동적(static)메소드에 프로그램실행시 자동으로 기록됨,프로그램종료시 자동으로 삭제됨,딱한번 한개만사용(공유) 


*RAM메모리의 정적(static)메모리는 처음보드의 구성으로 정해진다(계산법이있음 나중에 메모리슬롯추가되도 정적부분은 늘어나지않는다) 메소드영역,데이터영역이있음
 		동적메모리(stack&heap)  
		 - stack의 메소드영역 : 지역변수입력, 선언시생성 사용후소멸, 쓰레기값이남아있을수있으니 반드시 변수선언후사용
	         - heap의 메소드영역 : 객체(object)가 만들어지는 영역, 한번선언후에도 데이터기록이 남아있음(메모리 누수현상발생가능), JVM이 알아서 청소함
프로그램: cup에게 일을시키기위한 명령문장들을 만드는것 -계산
그문장이 ram메모리에 -> cpu ->처리결과를다시 메모리에
개발자는 메모리의 특성을 잘 알면좋다

*JVM구성은 JDK+JRE(실행환경)+API라이브러리+그리고! 쓰레기수집기(garbage collector)

c.f)
registy : cpu와 ram데이터전송시 cpu의 임시저장공간(속도차이)
buffer :ram과 외부장치사이 속도차이개선


[2-1.변수]
* 값의 종류(Data Type/자료형)
 : 값을 종류별로 구분하기 위해 제공되는 단어

 - 논리값 : true(참:1), false(거짓:0)2진수
 - 숫자 - 정수형 : 소숫점 이하값을 취급 안하는 수(-17, 0, 2, 33)
       - 실수형 : 소숫점 이하값을 취급 하는 수(1.234, -34.5, 3.14159)
 - 문자 - 한문자 : 자바에서는 유니코드 문자셋을 사용하므로,
		한글, 중국어 등 2바이트 문자를 한 글자로 취급함
       - 문자열 : 여러 개의 문자를 나열한 형태

<기본(Primitive) 자료형!!!!>
 - 논리형 : boolean(1byte에서 bit한개만 사용,최소자료형크기가 byte니까)
 - 정수형 - 1바이트짜리 정수 : byte(외부장치에서 네트워크통해 주고받는 사이즈i/o)
	  2바이트짜리 정수 : short_16bit(메모리,hdd직접접근하면os생성가능한데 java는직접접근이안됨 c언어의 자료를 읽어들일때)
	  4바이트짜리 정수 : int (정수의 기본형임)_32bit
	  8바이트짜리 정수 : long_64bit
 - 실수형 - 4바이트 실수 : float
	- 8바이트 실수 : double (실수의 기본형임)
 - 한문자 - 2바이트 문자 : char
 - 문자열 - 기본 자료형에는 제공 안 되고, 클래스형으로 제공됨
	  String 클래스!!!!를 기본으로 사용함, 순번(index)이있음, 문자열은 문자char를 나열한것,나열의 끝에는 null문자 2byte|2byte|2byte|null


* 변수 공간을 메모리에 만들고, 그 다음에 그 변수공간에 해당 값을 기록함
1. 변수 선언 
  : 변수 공간을 RAM동적메모리 stack영역에 만드는 작업
	자료형 변수명;	//해당 자료형의 값을 기록할 수 있는 방을
			//만들고 방이름(:소문자로시작 숫자가앞에안돼,예약어안되고,명시적으로)으로 변수명을 붙임
	ex>
	boolean flag;	//1byte
	byte num;	//1byte
	short stest;	//2byte
	int age;	//4byte
	long pay;	//8byte
	float radius;	//4byte
	double tax;	//8byte
	char gender;	//2byte
	String name;

	* 변수방에는 선언시 지정한 자료형의 값만 기록할 수 있음 !!!!*


-다른파일에 클래스가 가진 기능(메소드)를 불러와 사용시 클래스가 자료형처럼 선언해줌 
클래스명 변수명 = new 클래스명();
ex>StartTest.java
VariableSample1 test = new VariableSample1();
//클래스변수.메소드명();
test.sample1();


2. 준비된 변수방에 값 기록
	변수명 = 값; (반드시 변수형과 일치하는 자료값만 넣어야함!!!!)
	* = : 대입연산자임. 오른쪽에서 왼쪽으로 진행됨
		오른쪽은 반드시 값이 위치해야 함
		왼쪽은 반드시 변수가 존재해야 함 *
	ex>
	flag = false;
	num = (byte)12;	//12 라는 리터럴값은 기본 자료형이 int 임_형변환시킴(형변환을시키면 값손실발생,오른쪽맨끝byte만 남겨두고 앞에 3byte를 버림)
	stest = (short)120;
	age = 29;
	pay = 12345L;	//반드시 숫자뒤에L붙이는iso에서 정한 표현 규칙임
	radius = 54.7f;	//54.7 이라는 리터럴값은 기본형이 double임. float형이라는표시야F
			//iso에서 정한 표현 규칙임
	tax = 10.0;
	gender = 'F';	//숫자(계산에 사용할 수 있는 값)와 
		//문자(계산에 사용할 수 없는 값)는 반드시 구분되어야 함
		//문자리터럴 값은 반드시 '문자'로 표시해야 함

	** 문자열 값은 반드시 "문자열리터럴" 로 표시함 **


*자료형의 범위!!!!!
	boolean 
	byte : 1byte(-128 ~ 127)
	short: 2byte(-32768 ~ 32767)
	int : 4byte(-2147483648 ~ 214783647)
	long: 8byte
	float:4byte
	double:8byte
	char  :2byte
	String:

c.f)양자컴퓨터는 6진수


3. 변수 사용 : CPU 에게 변수방의 값을 읽어가서 계산하라는 의미임.
 ex>
	int a = 10;
	int b = 20;

	int result = a + b;

	System.out.println("a : " + a);
	System.out.println("b : " + b);
	System.out.println("a + b = " + result);

*** 변수의 초기화 ***
	: 변수공간 선언과 동시에 초기값 기록하는 것(stack에 쓰레기값때문에에에에~)
	=> 초기값 : 변수방에 첫번째로 기록되는 값

	자료형 변수명 = 초기값;

	ex>
	boolean flag = false;
	byte num = (byte)12;
	short stest = (short)120;
	int age = 29;
	long pay = 1234567L;
	float radius = 34.5f;
	double tax = 10.5;
	char gender = 'M';

	String name = "홍길동";


c.f)parmeters:매개변수


c.f)api에서 필요한 메소드 검색하기(연습문제 작성시)
클래스io에서 utill클래스 추가 (Since:1.6확인)
-네이버-
Scanner, InputStream 류, Reader 류 로
 원래 기본이 되는것은 InputStream으로 Byte 및 Byte 배열 단위로 키보드로 부터 읽어옵니다.
 하지만 이것은 입력값의 바이트 수 계산 및 한글 등의 2바이트 이상의 문자열 처리가 쉽지 않고 또한 기본이 바이트 단위다 보니 다른 타입에 입력에 대한 처리가 쉽지 않습니다.
 그래서 만든것이 Scanner와 Reader 류로 약간 차이는 있긴 하지만 거의 유사하며
 기존의 InputStream이 바이트 단위로 처리했다면 Scanner나 Reader 류 등은 int, float, double, long 등의 단위로도 읽을 수 있으며 String(문자열) 단위 등으로도 읽을 수 있습니다.


* 프로그래밍 실행 순서 *
 => 클래스 안의 메소드들에 의해 실행 순서가 정해짐
 => 실행 순서는 개발자가 지정함
 => 메소드 안의 프로그래밍 순서도 정해져 있음

----------	1. 변수 공간 준비 : 변수 선언 --> 지역변수라고 함
		[예약어] 자료형 변수명;

 => 지역변수 자료형 앞에 사용할 수 있는 키워드는 final 임.
	final 자료형 변수명 = 초기값;
	: 해당 변수방에 기록된 값 변경 불가를 의미함
	ex>
	double pi = 3.14159;	//원주율
	pi = 7.89;	//이전 값 지우고, 새 값 기록됨

	=> final double PI = 3.14159;
	pi = 7.89;	//Error

---------------- 2. 준비된 변수공간에 값 기록 처리
 => 직접 값 대입하는 경우
	변수명 = 값;
 => 키보드를 통해서 값을 입력받아 기록하는 경우
	변수명 = 키보드입력용 객체.읽기용메소드();
 
---------------- 3. 준비된 값에 대한 계산 처리
	: 연산자와 제어문이 사용됨
 => 연산자(Operator) : 값 계산에 사용되는 계산용 문자
 => 제어문(처리문) : 조건문, 반복문, 분기문 사용



--------------- 4. 계산 결과값에 대한 처리
 => 화면에 출력 확인하는 경우
	System.out.print/println/printf("출력할 내용" + 결과값);
	화면출력용객체.기록용 메소드("출력할 내용" + 결과값);

 => 외부 장치로 내보내는 경우(출력)
	외부장치출력용객체.기록용메소드("전송할 내용" + 전송할 값);



[2-2.형변환]
* 형변환(Casting)
 : 값의 자료형을 바꾸는 것 (원래방을 바꾸는것이아니라 들어갈 자료를!)
  단, boolean은 제외.

=> cast 연산자(형변환 연산자) 사용함
   - 2순위인 단항연산자임.(항목하나)
   - (바꿀자료형)값 또는 변수

=> 자동형변환과 강제(명시적) 형변환으로 구분할 수 있음
   - 자동형변환 
	1. 자료형이 다른 값끼리 계산될 때
		: 메모리 할당 크기가 큰 자료형으로 모두 바뀐 다음 계산됨.
		int a = 12;
		double d = 3.3;
		double result = a + d => 12 + 3.3 => 12.0 + 3.3 => 15.3

	2. 메모리 할당 크기가 큰 변수에 작은 자료형 값이 대입될 때
		double dnum = 123;
		//123(int) 이 123.0(double) 으로 바뀜 >> 123.0 이 dnum 에 대입됨.

   - 강제(명시적) 형변환
	: 소스 코드상에 직접 바꿀 자료형을 cast 연산자를 이용해서 명시함.
	* 크기가 큰 자료형 값을 작은 크기의 자료형 값으로 바꿀 때
	int a = (int)3.9;
	char ch = (char)97;

	** 컴퓨터의 값 처리 원칙 ==> 원칙이 지켜지지 않은 경우에 형변환 필요함
	  - 같은 종류끼리만 대입가능
	  - 같은 종류끼리만 계산가능
	  - 계산의 결과도 같은 종류의 값이 나와야 함(ex> int 21억+ int 21억 =42억(long)






다시공부해보기
변수의 실수 정수가 어떻게 메모리에 들어가는지  ????
10->2진수
2->10진수
진법

--------------------------

책을 읽고 이해가안되면 꼭 검색해서 찾아보고 아님강사님께 질문하기 이해하고 넘어가기


!!!!표시는 외워랑

ios공부도 같이할수있을까
http://blog.yagom.net/378

다들 대단해 조금해서 이러지 아예 몰랐음 무척 버벅였을꺼야 나 

흐름끊어지지않도록 수업잘듣기
